{
  "name": "postgresql-schema-sync",
  "displayName": "PostgreSQL Schema Compare & Sync",
  "description": "Advanced PostgreSQL schema comparison and synchronization extension for Visual Studio Code with enterprise-grade features",
  "version": "0.1.0",
  "publisher": "nomad-in-code",
  "icon": "./resources/icon.png",
  "engines": {
    "vscode": "^1.104.0",
    "node": ">=22.0.0"
  },
  "categories": [
    "Visualization",
    "Other"
  ],
  "keywords": [
    "postgresql",
    "postgres",
    "database",
    "schema",
    "comparison",
    "synchronization",
    "migration",
    "sql"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "views": {
      "postgresql-team": [
        {
          "id": "postgresqlExplorer",
          "name": "PostgreSQL Explorer",
          "icon": "$(database)",
          "contextualTitle": "PostgreSQL Explorer"
        }
      ]
    },
    "viewsContainers": {
      "activitybar": [
        {
          "id": "postgresql-team",
          "title": "PostgreSQL Schema Sync",
          "icon": "./resources/gray.png"
        }
      ]
    },
    "commands": [
      {
        "command": "postgresql.addConnection",
        "title": "Add Connection",
        "category": "PostgreSQL",
        "icon": "$(add)"
      },
      {
        "command": "postgresql.editConnection",
        "title": "Edit Connection",
        "category": "PostgreSQL",
        "icon": "$(edit)"
      },
      {
        "command": "postgresql.testConnection",
        "title": "Test Connection",
        "category": "PostgreSQL",
        "icon": "$(check)"
      },
      {
        "command": "postgresql.executeMigration",
        "title": "Execute Migration",
        "category": "PostgreSQL",
        "icon": "$(run)"
      },
      {
        "command": "postgresql.removeConnection",
        "title": "Remove Connection",
        "category": "PostgreSQL",
        "icon": "$(trash)"
      },
      {
        "command": "postgresql.refreshExplorer",
        "title": "Refresh Explorer",
        "category": "PostgreSQL",
        "icon": "$(refresh)"
      },
      {
        "command": "postgresql.browseSchema",
        "title": "Browse Schema",
        "category": "PostgreSQL",
        "icon": "$(search)"
      },
      {
        "command": "postgresql.compareSchemas",
        "title": "Compare Schemas",
        "category": "PostgreSQL",
        "icon": "$(diff)"
      },
      {
        "command": "postgresql.generateMigration",
        "title": "Generate Migration",
        "category": "PostgreSQL",
        "icon": "$(file-code)"
      },
      {
        "command": "postgresql.previewMigration",
        "title": "Preview Migration",
        "category": "PostgreSQL",
        "icon": "$(eye)"
      },
      {
        "command": "postgresql.viewObjectDetails",
        "title": "View Object Details",
        "category": "PostgreSQL",
        "icon": "$(info)"
      },
      {
        "command": "postgresql.showCommandStats",
        "title": "Show Command Stats",
        "category": "PostgreSQL",
        "icon": "$(graph)"
      },
      {
        "command": "postgresql.clearCommandErrors",
        "title": "Clear Command Errors",
        "category": "PostgreSQL",
        "icon": "$(error)"
      },
      {
        "command": "postgresql.showDashboard",
        "title": "Show Dashboard",
        "category": "PostgreSQL",
        "icon": "$(dashboard)"
      },
      {
        "command": "postgresql.showNotifications",
        "title": "Show Notifications",
        "category": "PostgreSQL",
        "icon": "$(bell)"
      },
      {
        "command": "postgresql.showActiveOperations",
        "title": "Show Active Operations",
        "category": "PostgreSQL",
        "icon": "$(history)"
      },
      {
        "command": "postgresql.showSchemaDriftReport",
        "title": "Show Schema Drift Report",
        "category": "PostgreSQL",
        "icon": "$(diff)"
      },
      {
        "command": "postgresql.showQueryAnalytics",
        "title": "Show Query Analytics",
        "category": "PostgreSQL",
        "icon": "$(chart)"
      },
      {
        "command": "postgresql.quickConnect",
        "title": "Quick Connect",
        "category": "PostgreSQL",
        "icon": "$(plug)"
      },
      {
        "command": "postgresql.openQueryEditor",
        "title": "Open Query Editor",
        "category": "PostgreSQL",
        "icon": "$(terminal)"
      },
      {
        "command": "postgresql.executeQuery",
        "title": "Execute Query",
        "category": "PostgreSQL",
        "icon": "$(run)"
      },
      {
        "command": "postgresql.executeCurrentFile",
        "title": "Execute Current SQL File",
        "category": "PostgreSQL",
        "icon": "$(run)"
      },
      {
        "command": "postgresql.formatCurrentFile",
        "title": "Format Current SQL File",
        "category": "PostgreSQL",
        "icon": "$(edit)"
      }
    ],
    "menus": {
      "view/title": [
        {
          "command": "postgresql.addConnection",
          "when": "view == postgresqlExplorer",
          "group": "navigation"
        },
        {
          "command": "postgresql.refreshExplorer",
          "when": "view == postgresqlExplorer",
          "group": "navigation"
        }
      ],
      "view/item/context": [
        {
          "command": "postgresql.editConnection",
          "when": "view == postgresqlExplorer && viewItem == connection",
          "group": "inline"
        },
        {
          "command": "postgresql.removeConnection",
          "when": "view == postgresqlExplorer && viewItem == connection",
          "group": "inline"
        },
        {
          "command": "postgresql.testConnection",
          "when": "view == postgresqlExplorer && viewItem == connection",
          "group": "inline"
        },
        {
          "command": "postgresql.compareSchemas",
          "when": "view == postgresqlExplorer && viewItem =~ /^(database|schema)$/",
          "group": "comparison"
        },
        {
          "command": "postgresql.browseSchema",
          "when": "view == postgresqlExplorer && viewItem == database",
          "group": "navigation"
        },
        {
          "command": "postgresql.viewObjectDetails",
          "when": "view == postgresqlExplorer && viewItem =~ /^(table|view|function|procedure|sequence|type|domain|collation|extension|role|tablespace)$/",
          "group": "details"
        },
        {
          "command": "postgresql.openQueryEditor",
          "when": "view == postgresqlExplorer && viewItem == connection",
          "group": "query"
        }
      ]
    }
  },
  "configuration": {
    "type": "object",
    "title": "PostgreSQL Schema Compare & Sync",
    "properties": {
      "postgresql-schema-sync.compare.mode": {
        "type": "string",
        "default": "strict",
        "enum": [
          "strict",
          "lenient"
        ],
        "enumDescriptions": [
          "Exact comparison including whitespace and formatting",
          "Ignore formatting differences and focus on structure"
        ],
        "description": "Default comparison mode for schema comparisons"
      },
      "postgresql-schema-sync.compare.ignoreSchemas": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "default": [
          "information_schema",
          "pg_catalog",
          "pg_toast"
        ],
        "description": "Schemas to ignore during comparison"
      },
      "postgresql-schema-sync.migration.dryRun": {
        "type": "boolean",
        "default": true,
        "description": "Enable dry-run mode for migration preview"
      },
      "postgresql-schema-sync.migration.batchSize": {
        "type": "number",
        "default": 50,
        "minimum": 10,
        "maximum": 200,
        "description": "Number of operations per migration batch"
      },
      "postgresql-schema-sync.notifications.enabled": {
        "type": "boolean",
        "default": true,
        "description": "Enable notifications for operation status"
      },
      "postgresql-schema-sync.theme.colorScheme": {
        "type": "string",
        "default": "auto",
        "enum": [
          "auto",
          "light",
          "dark"
        ],
        "description": "Color scheme for the extension UI"
      },
      "postgresql-schema-sync.debug.enabled": {
        "type": "boolean",
        "default": false,
        "description": "Enable debug logging"
      },
      "postgresql-schema-sync.debug.logLevel": {
        "type": "string",
        "default": "info",
        "enum": [
          "trace",
          "debug",
          "info",
          "warn",
          "error"
        ],
        "description": "Log level for debug output"
      },
      "postgresql.securityManager.enabled": {
        "type": "boolean",
        "default": true,
        "description": "Enable SSL/TLS certificate validation and security monitoring"
      },
      "postgresql.securityManager.securityLevel": {
        "type": "string",
        "default": "warning",
        "enum": [
          "strict",
          "warning",
          "permissive"
        ],
        "enumDescriptions": [
          "All security checks enabled. Self-signed certificates are not allowed.",
          "Security checks enabled with warnings. Self-signed certificates allowed with warnings.",
          "Minimal security checks. Self-signed certificates allowed."
        ],
        "description": "Security level for certificate validation"
      },
      "postgresql.securityManager.certificateValidation.enabled": {
        "type": "boolean",
        "default": true,
        "description": "Enable SSL/TLS certificate validation"
      },
      "postgresql.securityManager.certificateValidation.checkRevocation": {
        "type": "boolean",
        "default": false,
        "description": "Check certificate revocation lists (CRL/OCSP) - may impact performance"
      },
      "postgresql.securityManager.certificateValidation.checkTransparency": {
        "type": "boolean",
        "default": false,
        "description": "Check certificate transparency logs - may impact performance"
      },
      "postgresql.securityManager.certificateValidation.allowSelfSigned": {
        "type": "boolean",
        "default": false,
        "description": "Allow self-signed certificates (not recommended for production)"
      },
      "postgresql.securityManager.certificateValidation.minKeySize": {
        "type": "number",
        "default": 2048,
        "minimum": 1024,
        "maximum": 4096,
        "description": "Minimum acceptable certificate key size in bits"
      },
      "postgresql.securityManager.certificateValidation.maxValidityDays": {
        "type": "number",
        "default": 825,
        "minimum": 30,
        "maximum": 1095,
        "description": "Maximum certificate validity period in days (~2.25 years default)"
      },
      "postgresql.securityManager.certificatePinning.enabled": {
        "type": "boolean",
        "default": false,
        "description": "Enable certificate pinning for high-security environments"
      },
      "postgresql.securityManager.certificatePinning.autoPinTrusted": {
        "type": "boolean",
        "default": false,
        "description": "Automatically pin certificates from trusted Certificate Authorities"
      },
      "postgresql.securityManager.certificatePinning.requireUserApproval": {
        "type": "boolean",
        "default": true,
        "description": "Require user approval before pinning certificates"
      },
      "postgresql.securityManager.certificatePinning.maxPinAge": {
        "type": "number",
        "default": 365,
        "minimum": 30,
        "maximum": 730,
        "description": "Maximum age of pinned certificates in days"
      },
      "postgresql.securityManager.certificatePinning.allowedHostnames": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "default": [],
        "description": "List of hostnames allowed for certificate pinning (empty allows all)"
      },
      "postgresql.securityManager.monitoring.enabled": {
        "type": "boolean",
        "default": true,
        "description": "Enable security event monitoring and alerting"
      },
      "postgresql.securityManager.monitoring.alertLevels": {
        "type": "array",
        "items": {
          "type": "string",
          "enum": [
            "info",
            "warning",
            "error",
            "critical"
          ]
        },
        "default": [
          "warning",
          "error",
          "critical"
        ],
        "description": "Security alert levels that trigger notifications"
      },
      "postgresql.securityManager.monitoring.retentionDays": {
        "type": "number",
        "default": 90,
        "minimum": 7,
        "maximum": 365,
        "description": "Number of days to retain security events"
      },
      "postgresql.securityManager.monitoring.maxEvents": {
        "type": "number",
        "default": 1000,
        "minimum": 100,
        "maximum": 10000,
        "description": "Maximum number of security events to store"
      },
      "postgresql.securityManager.monitoring.autoResolveAfterDays": {
        "type": "number",
        "default": 30,
        "minimum": 1,
        "maximum": 90,
        "description": "Auto-resolve security events after specified days"
      },
      "postgresql.securityManager.monitoring.showNotifications": {
        "type": "boolean",
        "default": true,
        "description": "Show security notifications in VS Code"
      },
      "postgresql.securityManager.monitoring.showInStatusBar": {
        "type": "boolean",
        "default": true,
        "description": "Show security status in VS Code status bar"
      },
      "postgresql.securityManager.connectionSecurity.enforceSecureConnections": {
        "type": "boolean",
        "default": false,
        "description": "Enforce secure connections - block insecure connections"
      },
      "postgresql.securityManager.connectionSecurity.allowInsecureFallback": {
        "type": "boolean",
        "default": true,
        "description": "Allow fallback to insecure connections if secure connection fails"
      },
      "postgresql.securityManager.connectionSecurity.validateOnConnect": {
        "type": "boolean",
        "default": true,
        "description": "Validate certificates when establishing connections"
      },
      "postgresql.securityManager.connectionSecurity.validateOnReconnect": {
        "type": "boolean",
        "default": true,
        "description": "Validate certificates when reconnecting to databases"
      },
      "postgresql.queryEditor.maxResults": {
        "type": "number",
        "default": 1000,
        "minimum": 100,
        "maximum": 10000,
        "description": "Maximum number of rows to display in query results"
      },
      "postgresql.queryEditor.queryTimeout": {
        "type": "number",
        "default": 30,
        "minimum": 10,
        "maximum": 300,
        "description": "Query execution timeout in seconds"
      },
      "postgresql.queryEditor.autoComplete.enabled": {
        "type": "boolean",
        "default": true,
        "description": "Enable autocomplete in query editor"
      },
      "postgresql.queryEditor.syntaxHighlighting.enabled": {
        "type": "boolean",
        "default": true,
        "description": "Enable SQL syntax highlighting"
      },
      "postgresql.queryEditor.historySize": {
        "type": "number",
        "default": 100,
        "minimum": 50,
        "maximum": 500,
        "description": "Maximum number of queries to keep in history"
      },
      "postgresql.queryEditor.exportFormats": {
        "type": "array",
        "items": {
          "type": "string",
          "enum": [
            "csv",
            "json",
            "excel"
          ]
        },
        "default": [
          "csv",
          "json"
        ],
        "description": "Available export formats for query results"
      },
      "postgresql.teamCollaboration.enabled": {
        "type": "boolean",
        "default": true,
        "description": "Enable team collaboration features"
      },
      "postgresql.teamCollaboration.autoShareQueries": {
        "type": "boolean",
        "default": false,
        "description": "Automatically share queries with team members"
      },
      "postgresql.teamCollaboration.requireApproval": {
        "type": "boolean",
        "default": false,
        "description": "Require approval before sharing queries"
      },
      "postgresql.teamCollaboration.organizationId": {
        "type": "string",
        "default": "",
        "description": "Organization ID for multi-organization setups"
      },
      "postgresql.performanceMonitoring.enabled": {
        "type": "boolean",
        "default": true,
        "description": "Enable performance monitoring and analytics"
      },
      "postgresql.performanceMonitoring.slowQueryThreshold": {
        "type": "number",
        "default": 5000,
        "minimum": 1000,
        "maximum": 60000,
        "description": "Threshold for slow query detection in milliseconds"
      },
      "postgresql.performanceMonitoring.alertCooldown": {
        "type": "number",
        "default": 300,
        "minimum": 60,
        "maximum": 3600,
        "description": "Cooldown period between similar alerts in seconds"
      },
      "postgresql.performanceMonitoring.retentionDays": {
        "type": "number",
        "default": 30,
        "minimum": 7,
        "maximum": 365,
        "description": "Number of days to retain performance data"
      },
      "postgresql.schemaDocumentation.enabled": {
        "type": "boolean",
        "default": true,
        "description": "Enable collaborative schema documentation"
      },
      "postgresql.schemaDocumentation.requireReview": {
        "type": "boolean",
        "default": true,
        "description": "Require review before publishing documentation"
      },
      "postgresql.schemaDocumentation.autoGenerate": {
        "type": "boolean",
        "default": false,
        "description": "Auto-generate documentation from schema metadata"
      },
      "postgresql.dataExport.chunkSize": {
        "type": "number",
        "default": 1000,
        "minimum": 100,
        "maximum": 10000,
        "description": "Number of rows to process in each export chunk"
      },
      "postgresql.dataExport.parallelProcessing": {
        "type": "boolean",
        "default": false,
        "description": "Enable parallel processing for large exports"
      },
      "postgresql.dataExport.compression.enabled": {
        "type": "boolean",
        "default": true,
        "description": "Enable compression for export files"
      },
      "postgresql.dataExport.compression.level": {
        "type": "number",
        "default": 6,
        "minimum": 1,
        "maximum": 9,
        "description": "Compression level (1-9, higher = smaller files but slower)"
      },
      "postgresql.dataImport.batchSize": {
        "type": "number",
        "default": 1000,
        "minimum": 100,
        "maximum": 10000,
        "description": "Number of rows to process in each import batch"
      },
      "postgresql.dataImport.continueOnError": {
        "type": "boolean",
        "default": false,
        "description": "Continue importing when errors are encountered"
      },
      "postgresql.dataImport.validateBeforeImport": {
        "type": "boolean",
        "default": true,
        "description": "Validate data before performing import"
      },
      "postgresql.backup.compression.enabled": {
        "type": "boolean",
        "default": true,
        "description": "Enable compression for backup files"
      },
      "postgresql.backup.encryption.enabled": {
        "type": "boolean",
        "default": false,
        "description": "Enable encryption for backup files"
      },
      "postgresql.backup.parallel.enabled": {
        "type": "boolean",
        "default": false,
        "description": "Enable parallel backup processing"
      },
      "postgresql.backup.verifyAfterCreation": {
        "type": "boolean",
        "default": true,
        "description": "Verify backup integrity after creation"
      },
      "postgresql.backup.retention.daily": {
        "type": "number",
        "default": 7,
        "minimum": 1,
        "maximum": 365,
        "description": "Number of daily backups to retain"
      },
      "postgresql.backup.retention.weekly": {
        "type": "number",
        "default": 4,
        "minimum": 1,
        "maximum": 52,
        "description": "Number of weekly backups to retain"
      },
      "postgresql.backup.retention.monthly": {
        "type": "number",
        "default": 12,
        "minimum": 1,
        "maximum": 120,
        "description": "Number of monthly backups to retain"
      },
      "postgresql.recovery.pointInTime.enabled": {
        "type": "boolean",
        "default": true,
        "description": "Enable point-in-time recovery capabilities"
      },
      "postgresql.recovery.verifyAfterRecovery": {
        "type": "boolean",
        "default": true,
        "description": "Verify data integrity after recovery"
      },
      "postgresql.validation.enabled": {
        "type": "boolean",
        "default": true,
        "description": "Enable data validation features"
      },
      "postgresql.validation.strictMode": {
        "type": "boolean",
        "default": false,
        "description": "Enable strict validation mode (fail on any warning)"
      },
      "postgresql.validation.sampleSize": {
        "type": "number",
        "default": 1000,
        "minimum": 100,
        "maximum": 10000,
        "description": "Sample size for data quality analysis"
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "pnpm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "lint": "eslint src --ext ts",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage",
    "build:dotnet": "cd pg-drive/PostgreSqlSchemaCompareSync && dotnet build",
    "build:dotnet:publish": "cd pg-drive/PostgreSqlSchemaCompareSync && dotnet publish --configuration Debug --output bin/Publish/net9.0",
    "build:scripts": "tsc -p tsconfig.scripts.json",
    "build:dotnet:copy": "pnpm run build:scripts && pnpm run build:dotnet && pnpm run build:dotnet:publish && node scripts/copy-dll.js",
    "build:all": "pnpm run build:dotnet:copy && pnpm run compile",
    "package": "pnpm run build:all && vsce package",
    "clean": "rimraf bin out",
    "postinstall": "pnpm run build:scripts && node scripts/check-edge.js"
  },
  "devDependencies": {
    "@types/jest": "^30.0.0",
    "@types/mocha": "^10.0.10",
    "@types/node": "24.7.0",
    "@types/sinon": "^17.0.4",
    "@types/vscode": "^1.104.0",
    "@typescript-eslint/eslint-plugin": "^8.46.0",
    "@typescript-eslint/parser": "^8.46.0",
    "@vscode/test-cli": "^0.0.11",
    "@vscode/test-electron": "^2.5.2",
    "@vscode/vsce": "^3.6.2",
    "edge-js": "^24.0.5",
    "esbuild": "^0.25.10",
    "eslint": "^9.37.0",
    "npm-run-all": "^4.1.5",
    "rimraf": "^6.0.1",
    "sinon": "^21.0.0",
    "ts-jest": "^29.4.4",
    "ts-node": "^10.9.2",
    "typescript": "^5.9.3"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/chaluvadis/postgresql-schema-sync.git"
  },
  "bugs": {
    "url": "https://github.com/chaluvadis/postgresql-schema-sync/issues"
  }
}