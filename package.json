{
  "type": "module",
  "name": "postgresql-schema-sync",
  "displayName": "PostgreSQL Schema Compare & Sync",
  "description": "Advanced PostgreSQL schema comparison and synchronization extension for Visual Studio Code with enterprise-grade features",
  "version": "0.0.1",
  "publisher": "postgresql-schema-sync",
  "icon": "resources/icon.png",
  "engines": {
    "vscode": "^1.104.0",
    "node": ">=22.0.0"
  },
  "categories": [
    "Visualization",
    "Other"
  ],
  "keywords": [
    "postgresql",
    "postgres",
    "database",
    "schema",
    "comparison",
    "synchronization",
    "migration",
    "sql"
  ],
  "activationEvents": [],
  "main": "./out/extension.js",
  "contributes": {
    "views": {
      "explorer": [
        {
          "id": "postgresqlExplorer",
          "name": "PostgreSQL Explorer",
          "icon": "$(database)",
          "contextualTitle": "PostgreSQL Explorer"
        }
      ]
    },
    "commands": [
      {
        "command": "postgresql.addConnection",
        "title": "Add Connection",
        "category": "PostgreSQL",
        "icon": "$(add)"
      },
      {
        "command": "postgresql.editConnection",
        "title": "Edit Connection",
        "category": "PostgreSQL",
        "icon": "$(edit)"
      },
      {
        "command": "postgresql.removeConnection",
        "title": "Remove Connection",
        "category": "PostgreSQL",
        "icon": "$(remove)"
      },
      {
        "command": "postgresql.testConnection",
        "title": "Test Connection",
        "category": "PostgreSQL",
        "icon": "$(check)"
      },
      {
        "command": "postgresql.refreshExplorer",
        "title": "Refresh Explorer",
        "category": "PostgreSQL",
        "icon": "$(refresh)"
      },
      {
        "command": "postgresql.browseSchema",
        "title": "Browse Schema",
        "category": "PostgreSQL",
        "icon": "$(search)"
      },
      {
        "command": "postgresql.compareSchemas",
        "title": "Compare Schemas",
        "category": "PostgreSQL",
        "icon": "$(diff)"
      },
      {
        "command": "postgresql.generateMigration",
        "title": "Generate Migration",
        "category": "PostgreSQL",
        "icon": "$(file-code)"
      },
      {
        "command": "postgresql.executeMigration",
        "title": "Execute Migration",
        "category": "PostgreSQL",
        "icon": "$(run)"
      },
      {
        "command": "postgresql.previewMigration",
        "title": "Preview Migration",
        "category": "PostgreSQL",
        "icon": "$(eye)"
      },
      {
        "command": "postgresql.rollbackMigration",
        "title": "Rollback Migration",
        "category": "PostgreSQL",
        "icon": "$(undo)"
      },
      {
        "command": "postgresql.viewObjectDetails",
        "title": "View Object Details",
        "category": "PostgreSQL",
        "icon": "$(info)"
      },
      {
        "command": "postgresql.showHelp",
        "title": "Show Help",
        "category": "PostgreSQL",
        "icon": "$(question)"
      },
      {
        "command": "postgresql.showLogs",
        "title": "Show Logs",
        "category": "PostgreSQL",
        "icon": "$(output)"
      },
      {
        "command": "postgresql.openSettings",
        "title": "Open Settings",
        "category": "PostgreSQL",
        "icon": "$(settings-gear)"
      },
      {
        "command": "postgresql.quickConnect",
        "title": "Quick Connect",
        "category": "PostgreSQL",
        "icon": "$(add)"
      },
      {
        "command": "postgresql.compareSelectedSchemas",
        "title": "Compare Selected Schemas",
        "category": "PostgreSQL",
        "icon": "$(diff-multiple)"
      },
      {
        "command": "postgresql.runQuickMigration",
        "title": "Quick Migration",
        "category": "PostgreSQL",
        "icon": "$(run-all)"
      },
      {
        "command": "postgresql.expandTree",
        "title": "Expand All",
        "category": "PostgreSQL",
        "icon": "$(expand-all)"
      },
      {
        "command": "postgresql.collapseTree",
        "title": "Collapse All",
        "category": "PostgreSQL",
        "icon": "$(collapse-all)"
      },
      {
        "command": "postgresql.focusTree",
        "title": "Focus Tree View",
        "category": "PostgreSQL",
        "icon": "$(focus-view)"
      },
      {
        "command": "postgresql.manageConnections",
        "title": "Manage Connections",
        "category": "PostgreSQL",
        "icon": "$(settings-gear)"
      },
      {
        "command": "postgresql.compareObjects",
        "title": "Compare Objects",
        "category": "PostgreSQL",
        "icon": "$(diff-multiple)"
      },
      {
        "command": "postgresql.previewAdvancedMigration",
        "title": "Preview Advanced Migration",
        "category": "PostgreSQL",
        "icon": "$(preview)"
      },
      {
        "command": "postgresql.refreshEnhancedTree",
        "title": "Refresh Enhanced Tree",
        "category": "PostgreSQL",
        "icon": "$(refresh)"
      },
      {
        "command": "postgresql.searchTree",
        "title": "Search Tree",
        "category": "PostgreSQL",
        "icon": "$(search)"
      },
      {
        "command": "postgresql.startOperation",
        "title": "Start Operation",
        "category": "PostgreSQL",
        "icon": "$(sync)"
      },
      {
        "command": "postgresql.updateOperation",
        "title": "Update Operation",
        "category": "PostgreSQL",
        "icon": "$(sync)"
      },
      {
        "command": "postgresql.completeOperation",
        "title": "Complete Operation",
        "category": "PostgreSQL",
        "icon": "$(check)"
      },
      {
        "command": "postgresql.showNotification",
        "title": "Show Notification",
        "category": "PostgreSQL",
        "icon": "$(bell)"
      },
      {
        "command": "postgresql.exportNotifications",
        "title": "Export Notifications",
        "category": "PostgreSQL",
        "icon": "$(export)"
      },
      {
        "command": "postgresql.refreshConnection",
        "title": "Refresh Connection",
        "category": "PostgreSQL",
        "icon": "$(refresh)"
      }
    ],
    "menus": {
      "view/title": [
        {
          "command": "postgresql.addConnection",
          "when": "view == postgresqlExplorer",
          "group": "navigation"
        },
        {
          "command": "postgresql.refreshExplorer",
          "when": "view == postgresqlExplorer",
          "group": "navigation"
        },
        {
          "command": "postgresql.expandTree",
          "when": "view == postgresqlExplorer",
          "group": "navigation"
        },
        {
          "command": "postgresql.collapseTree",
          "when": "view == postgresqlExplorer",
          "group": "navigation"
        }
      ],
      "view/item/context": [
        {
          "command": "postgresql.editConnection",
          "when": "view == postgresqlExplorer && viewItem == connection",
          "group": "inline"
        },
        {
          "command": "postgresql.removeConnection",
          "when": "view == postgresqlExplorer && viewItem == connection",
          "group": "inline"
        },
        {
          "command": "postgresql.testConnection",
          "when": "view == postgresqlExplorer && viewItem == connection",
          "group": "inline"
        },
        {
          "command": "postgresql.compareSchemas",
          "when": "view == postgresqlExplorer && viewItem =~ /^(database|schema)$/",
          "group": "comparison"
        },
        {
          "command": "postgresql.viewObjectDetails",
          "when": "view == postgresqlExplorer && viewItem =~ /^(table|view|function|procedure|sequence|type|domain|collation|extension|role|tablespace)$/",
          "group": "details"
        }
      ],
      "commandPalette": [
        {
          "command": "postgresql.addConnection",
          "when": "workspaceState.postgresql.connectionsExist == false"
        },
        {
          "command": "postgresql.compareSchemas",
          "when": "workspaceState.postgresql.connectionsExist == true"
        },
        {
          "command": "postgresql.generateMigration",
          "when": "workspaceState.postgresql.comparisonExists == true"
        },
        {
          "command": "postgresql.executeMigration",
          "when": "workspaceState.postgresql.migrationExists == true"
        }
      ]
    },
    "keybindings": [
      {
        "command": "postgresql.addConnection",
        "key": "ctrl+shift+p",
        "mac": "cmd+shift+p",
        "when": "editorTextFocus",
        "args": []
      },
      {
        "command": "postgresql.refreshExplorer",
        "key": "ctrl+shift+r",
        "mac": "cmd+shift+r",
        "when": "view == postgresqlExplorer"
      },
      {
        "command": "postgresql.testConnection",
        "key": "ctrl+shift+t",
        "mac": "cmd+shift+t",
        "when": "view == postgresqlExplorer && viewItem == connection"
      },
      {
        "command": "postgresql.compareSchemas",
        "key": "ctrl+shift+c",
        "mac": "cmd+shift+c",
        "when": "view == postgresqlExplorer && viewItem =~ /^(database|schema)$/"
      },
      {
        "command": "postgresql.generateMigration",
        "key": "ctrl+shift+g",
        "mac": "cmd+shift+g",
        "when": "workspaceState.postgresql.comparisonExists == true"
      },
      {
        "command": "postgresql.previewMigration",
        "key": "ctrl+shift+v",
        "mac": "cmd+shift+v",
        "when": "workspaceState.postgresql.migrationExists == true"
      },
      {
        "command": "postgresql.executeMigration",
        "key": "ctrl+shift+e",
        "mac": "cmd+shift+e",
        "when": "workspaceState.postgresql.migrationExists == true"
      },
      {
        "command": "postgresql.rollbackMigration",
        "key": "ctrl+shift+u",
        "mac": "cmd+shift+u",
        "when": "workspaceState.postgresql.migrationExists == true"
      },
      {
        "command": "postgresql.viewObjectDetails",
        "key": "ctrl+shift+d",
        "mac": "cmd+shift+d",
        "when": "view == postgresqlExplorer && viewItem =~ /^(table|view|function|procedure|sequence|type|domain|collation|extension|role|tablespace)$/"
      },
      {
        "command": "postgresql.browseSchema",
        "key": "ctrl+shift+b",
        "mac": "cmd+shift+b",
        "when": "view == postgresqlExplorer && viewItem == database"
      },
      {
        "command": "postgresql.showDashboard",
        "key": "ctrl+shift+h",
        "mac": "cmd+shift+h"
      },
      {
        "command": "postgresql.showNotifications",
        "key": "ctrl+shift+n",
        "mac": "cmd+shift+n"
      },
      {
        "command": "postgresql.showLogs",
        "key": "ctrl+shift+l",
        "mac": "cmd+shift+l"
      },
      {
        "command": "postgresql.openSettings",
        "key": "ctrl+shift+s",
        "mac": "cmd+shift+s"
      },
      {
        "command": "postgresql.showHelp",
        "key": "f1",
        "when": "resourceExtname == .sql || resourceExtname == .psql"
      },
      {
        "command": "postgresql.quickConnect",
        "key": "ctrl+shift+n",
        "mac": "cmd+shift+n",
        "when": "editorTextFocus"
      },
      {
        "command": "postgresql.compareSelectedSchemas",
        "key": "ctrl+shift+m",
        "mac": "cmd+shift+m",
        "when": "view == postgresqlExplorer"
      },
      {
        "command": "postgresql.runQuickMigration",
        "key": "ctrl+shift+x",
        "mac": "cmd+shift+x",
        "when": "workspaceState.postgresql.migrationExists == true"
      },
      {
        "command": "postgresql.expandTree",
        "key": "ctrl+shift+=",
        "mac": "cmd+shift+=",
        "when": "view == postgresqlExplorer"
      },
      {
        "command": "postgresql.collapseTree",
        "key": "ctrl+shift+-",
        "mac": "cmd+shift+-",
        "when": "view == postgresqlExplorer"
      },
      {
        "command": "postgresql.focusTree",
        "key": "ctrl+shift+f",
        "mac": "cmd+shift+f",
        "when": "editorTextFocus"
      }
    ],
    "configuration": {
      "type": "object",
      "title": "PostgreSQL Schema Compare & Sync",
      "properties": {
        "postgresql-schema-sync.compare.mode": {
          "type": "string",
          "default": "strict",
          "enum": [
            "strict",
            "lenient"
          ],
          "enumDescriptions": [
            "Exact comparison including whitespace and formatting",
            "Ignore formatting differences and focus on structure"
          ],
          "description": "Default comparison mode for schema comparisons"
        },
        "postgresql-schema-sync.compare.ignoreSchemas": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [
            "information_schema",
            "pg_catalog",
            "pg_toast"
          ],
          "description": "Schemas to ignore during comparison"
        },
        "postgresql-schema-sync.migration.dryRun": {
          "type": "boolean",
          "default": true,
          "description": "Enable dry-run mode for migration preview"
        },
        "postgresql-schema-sync.migration.batchSize": {
          "type": "number",
          "default": 50,
          "minimum": 10,
          "maximum": 200,
          "description": "Number of operations per migration batch"
        },
        "postgresql-schema-sync.notifications.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable notifications for operation status"
        },
        "postgresql-schema-sync.theme.colorScheme": {
          "type": "string",
          "default": "auto",
          "enum": [
            "auto",
            "light",
            "dark"
          ],
          "description": "Color scheme for the extension UI"
        },
        "postgresql-schema-sync.debug.enabled": {
          "type": "boolean",
          "default": false,
          "description": "Enable debug logging"
        },
        "postgresql-schema-sync.debug.logLevel": {
          "type": "string",
          "default": "info",
          "enum": [
            "trace",
            "debug",
            "info",
            "warn",
            "error"
          ],
          "description": "Log level for debug output"
        },
        "postgresql.securityManager.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable SSL/TLS certificate validation and security monitoring"
        },
        "postgresql.securityManager.securityLevel": {
          "type": "string",
          "default": "warning",
          "enum": [
            "strict",
            "warning",
            "permissive"
          ],
          "enumDescriptions": [
            "All security checks enabled. Self-signed certificates are not allowed.",
            "Security checks enabled with warnings. Self-signed certificates allowed with warnings.",
            "Minimal security checks. Self-signed certificates allowed."
          ],
          "description": "Security level for certificate validation"
        },
        "postgresql.securityManager.certificateValidation.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable SSL/TLS certificate validation"
        },
        "postgresql.securityManager.certificateValidation.checkRevocation": {
          "type": "boolean",
          "default": false,
          "description": "Check certificate revocation lists (CRL/OCSP) - may impact performance"
        },
        "postgresql.securityManager.certificateValidation.checkTransparency": {
          "type": "boolean",
          "default": false,
          "description": "Check certificate transparency logs - may impact performance"
        },
        "postgresql.securityManager.certificateValidation.allowSelfSigned": {
          "type": "boolean",
          "default": false,
          "description": "Allow self-signed certificates (not recommended for production)"
        },
        "postgresql.securityManager.certificateValidation.minKeySize": {
          "type": "number",
          "default": 2048,
          "minimum": 1024,
          "maximum": 4096,
          "description": "Minimum acceptable certificate key size in bits"
        },
        "postgresql.securityManager.certificateValidation.maxValidityDays": {
          "type": "number",
          "default": 825,
          "minimum": 30,
          "maximum": 1095,
          "description": "Maximum certificate validity period in days (~2.25 years default)"
        },
        "postgresql.securityManager.certificatePinning.enabled": {
          "type": "boolean",
          "default": false,
          "description": "Enable certificate pinning for high-security environments"
        },
        "postgresql.securityManager.certificatePinning.autoPinTrusted": {
          "type": "boolean",
          "default": false,
          "description": "Automatically pin certificates from trusted Certificate Authorities"
        },
        "postgresql.securityManager.certificatePinning.requireUserApproval": {
          "type": "boolean",
          "default": true,
          "description": "Require user approval before pinning certificates"
        },
        "postgresql.securityManager.certificatePinning.maxPinAge": {
          "type": "number",
          "default": 365,
          "minimum": 30,
          "maximum": 730,
          "description": "Maximum age of pinned certificates in days"
        },
        "postgresql.securityManager.certificatePinning.allowedHostnames": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "List of hostnames allowed for certificate pinning (empty allows all)"
        },
        "postgresql.securityManager.monitoring.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable security event monitoring and alerting"
        },
        "postgresql.securityManager.monitoring.alertLevels": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "info",
              "warning",
              "error",
              "critical"
            ]
          },
          "default": [
            "warning",
            "error",
            "critical"
          ],
          "description": "Security alert levels that trigger notifications"
        },
        "postgresql.securityManager.monitoring.retentionDays": {
          "type": "number",
          "default": 90,
          "minimum": 7,
          "maximum": 365,
          "description": "Number of days to retain security events"
        },
        "postgresql.securityManager.monitoring.maxEvents": {
          "type": "number",
          "default": 1000,
          "minimum": 100,
          "maximum": 10000,
          "description": "Maximum number of security events to store"
        },
        "postgresql.securityManager.monitoring.autoResolveAfterDays": {
          "type": "number",
          "default": 30,
          "minimum": 1,
          "maximum": 90,
          "description": "Auto-resolve security events after specified days"
        },
        "postgresql.securityManager.monitoring.showNotifications": {
          "type": "boolean",
          "default": true,
          "description": "Show security notifications in VS Code"
        },
        "postgresql.securityManager.monitoring.showInStatusBar": {
          "type": "boolean",
          "default": true,
          "description": "Show security status in VS Code status bar"
        },
        "postgresql.securityManager.connectionSecurity.enforceSecureConnections": {
          "type": "boolean",
          "default": false,
          "description": "Enforce secure connections - block insecure connections"
        },
        "postgresql.securityManager.connectionSecurity.allowInsecureFallback": {
          "type": "boolean",
          "default": true,
          "description": "Allow fallback to insecure connections if secure connection fails"
        },
        "postgresql.securityManager.connectionSecurity.validateOnConnect": {
          "type": "boolean",
          "default": true,
          "description": "Validate certificates when establishing connections"
        },
        "postgresql.securityManager.connectionSecurity.validateOnReconnect": {
          "type": "boolean",
          "default": true,
          "description": "Validate certificates when reconnecting to databases"
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "lint": "eslint src --ext ts",
    "build:dotnet": "npx ts-node build-dotnet.ts",
    "build:all": "npm run build:dotnet && npm run compile",
    "verify:dotnet": "npx ts-node verify-dotnet-dll.ts",
    "clean": "rimraf bin out"
  },
  "devDependencies": {
    "@types/node": "24.6.2",
    "@types/vscode": "^1.104.0",
    "@typescript-eslint/eslint-plugin": "^8.44.1",
    "@typescript-eslint/parser": "^8.44.1",
    "@vscode/vsce": "^3.6.2",
    "edge-js": "^24.0.5",
    "eslint": "^9.37.0",
    "rimraf": "^6.0.1",
    "ts-node": "^10.9.2",
    "typescript": "^5.9.3"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/chaluvadis/postgresql-schema-sync.git"
  },
  "bugs": {
    "url": "https://github.com/chaluvadis/postgresql-schema-sync/issues"
  },
  "homepage": "https://github.com/chaluvadis/postgresql-schema-sync#readme"
}